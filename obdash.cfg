## .................................
## -- 1st Level Menu ---------------

[menu "Main"]
	menuitem = "menu:New: New module ..."
	menuitem = "menu:URL: Set remote repository URL"
	menuitem = "menu:Push_Pull: Push & Pull procedures"
	menuitem = "menu:Branch: Create, Checkout, ... branch"
	menuitem = "menu:Status_Commit: Status, Add, Commit procedures & Logs"
	menuitem = "menu:List: List modules"
	menuitem = "menu:Check: Check config files of <obdash>"
	menuitem = "menu:Utility: Set .gitignore section recursively"
	menuitem = "menu:Remove: Remove modules"

## .................................
## -- 2nd Level Menu ---------------

[menu "New"]
	menuitem = "command:Crt: Creating a  (smdl)  new one"
	menuitem = "command:CrG: Creating a  generic new one"
	menuitem = "command:Cln: Cloning  an (smdl)    existing one"
	menuitem = "command:ClG: Cloning  an (generic) existing one"
	menuitem = "command:Adb: Add & Absorb an existing one"
	menuitem = "command:UpI: Update & --init submodule after clone without recursive"
	
[menu "URL"]
	menuitem = "command:StU: Set new url"
	menuitem = "command:SUP: Set new url and then push"

[menu "Push_Pull"]
	menuitem = "command:Psh: $ git push"
    menuitem = "command:FMR: $ git fetch -> merge"
    menuitem = "command:PlR: $ git pull"
    menuitem = "command:Arc: $ git archive"
    menuitem = "command:ArI: archive importing"

[menu "Branch"]
	menuitem = "command:BSt: Branch status check (name of branch or DETACHED MODE)"
	menuitem = "command:BYC: Branch Synchro status check"
	menuitem = "command:BcC: Branch checkout"
	menuitem = "command:BCS: Branch checkout to owner & Branch synchro"
	menuitem = "command:Ref: Reset to <general> refs parameter in <config> file"
	menuitem = "command:RfA: Add single branch to refs parameter in <config> file"
	menuitem = "command:BLC: Branch list from <user_branch_config> file"

[menu "Status_Commit"]
	menuitem = "command:GRS: git status recursive"
	menuitem = "command:GAC: git add -> commit -> log -> status recursive"

[menu "List"]
	menuitem = "command:LCF: List local submodule - via <remote_device_modules> file"
	menuitem = "command:LFe: List local submodule - via <foreach> command"
	menuitem = "command:LFW: List local submodule - via <find> command <working> folder"
	menuitem = "command:LFG: List local submodule - via <find> command <.git> folder"
	menuitem = "command:LUn: List local submodule - union of all previous lists"
	menuitem = "command:LTT: List local submodule - tests"
	menuitem = "command:LsR: List remote submodule"

[menu "Check"]
	menuitem = "command:Chk: Check the repo remote url in all config files (there are three one)"
	menuitem = "command:CkS: Check the submodule status"

[menu "Utility"]
	menuitem = "command:SRI: Set .gitignore recursively on all submodule, parent module has to have <.gitignore_module> file properly configured"
	menuitem = "command:Lcs: Check  license"

[menu "Remove"]
	menuitem = "command:RmL: Removing a local existing one"
	menuitem = "command:RmR: Removing a remote existing one"

## .................................
## -- Lower Level Sub-Menus --------

[menu "Set_url"]
    menuitem = "command:SRUp: Storage priority"
    menuitem = "command:SRUd: Storage default"
    menuitem = "command:SRUc: Storage custom"

[menu "Set_branch"]
    menuitem = "command:BcOw: Branch owner"
    menuitem = "command:BcMn: Branch main"
    menuitem = "command:BcOt: Branch other"
    menuitem = "command:BcAl: Branch all"
    menuitem = "command:BcCg: Branch user config file"

## .................................
## -- Command Section --------------

#### _______________________________
#### ___ [menu "New"] ______________

[command "Crt"]
	# --- set path & name of new module
	script = func_repogroup_without_main
	script = func_repo_parent_module
	script = func_new_module_name
	# --- set remote repo url
	script = func_repourl_storage
	script = func_repourl_machine
	script = func_repourl_address
	script = func_repo_remote_url
	# --- check & export variables to perform
	script = func_Info_Summary
	script = continue_or_exit
	script = func_export_variable
	# --- perform procedure
	script = perform_creation
	# --- check procedure
	# script = perform_url_check
	script = perform_module_status

[command "CrG"]
	# --- set path & name of new module
	script = func_repogroup_without_main
	script = func_repo_parent_module
	script = func_generic_new_module_name
	# --- set remote repo url
	script = func_repourl_storage
	script = func_repourl_machine
	script = func_repourl_address
	script = func_repo_remote_url
	# --- check & export variables to perform
	script = func_Info_Summary
	script = continue_or_exit
	script = func_export_variable
	# --- perform procedure
	script = perform_generic_creation
	# --- check procedure
	# script = perform_url_check
	script = perform_module_status

[command "Cln"]
	# --- set path & name of new module
	script = func_repogroup_without_main
	script = func_repo_parent_module
	script = func_cloned_module_dir
	# --- set remote repo url
	script = func_repourl_storage
	script = func_repourl_machine
	script = func_repourl_address
	# --- select module to clone
	script = func_remote_module_list
	# --- prepare variable to perform
	script = func_export_variable
	script = func_Info_Summary
	script = continue_or_exit
	# --- perform procedure
	script = perform_cloning
	# --- check procedure
	# script = perform_url_check

[command "ClG"]
	# --- set repogroup & parent module of the module to clone
	script = func_repogroup_without_main
	script = func_repo_parent_module
	# --- set remote repo url
	script = func_repourl_storage
	script = func_repourl_machine
	script = func_repourl_address
	# --- set folder where performing the clonation
	script = func_cloned_generic_module_dir_0
	# --- info remote repo url
	script = func_repo_remote_url
	# --- prepare variable to perform
	script = func_export_variable
	script = func_Info_Summary
	script = continue_or_exit
	# --- perform procedure
	script = perform_generic_cloning
	# --- check procedure
	# script = perform_url_check

[command "Adb"]
	# --- select .git dir to abasorb
	script = func_absorbing_module
	# --- set remote repo url
	script = func_repourl_storage
	script = func_repourl_machine
	script = func_repourl_address
	# script = func_repogroup_without_main
	script = func_module_parent_repo_remote_url
	# --- check & export variables to perform
	script = func_Info_Summary
	script = continue_or_exit
	script = func_export_variable
	# --- perform procedure
	script = perform_absorbing

[command "UpI"]
	script = func_repogroup_with_main
	script = func_repomodule
	script = func_selecting_submodules
	# --- check & export variables to perform
	script = func_Info_Summary
	script = continue_or_exit
	# --- perform procedure
	script = perform_submodule_update_init

#### _______________________________
#### ___ [menu "URL"] ______________

[command "StU"]
	# --- select module
	script = func_repogroup_with_main
	script = func_repomodule
	script = "menu_name=\"Set_url\""
	script = "call_menu"
	script = func_repo_remote_url
	script = recursive_or_not
	script = func_Info_Summary
	script = continue_or_exit
	# --- perform procedure
	script = perform_url_setting

[command "SUP"]
	# --- select module
	script = func_repogroup_with_main
	script = func_repomodule
	script = "menu_name=\"Set_url\""
	script = "call_menu"
	script = func_repo_remote_url
	script = recursive_or_not
	script = func_Info_Summary
	script = continue_or_exit
	# --- perform procedure
	script = perform_url_setting
	script = perform_push

[command "SRUp"]
	# --- set remote repo url
	script = func_priority_select

[command "SRUd"]
	# --- set remote repo url
	script = func_repourl_storage

[command "SRUc"]
	# --- set remote repo url
	script = func_repourl_storage
	script = func_repourl_machine
	script = func_repourl_address

#### _______________________________
#### ___ [menu "Push_Pull"] ________

[command "Psh"]
	# --- select module
	script = func_repogroup_with_main
	script = func_repomodule
	script = recursive_or_not
	script = func_Info_Summary
	script = continue_or_exit
	# --- perform procedure
	script = perform_push

[command "FMR"]
	# --- select module
	script = func_repogroup_with_main
	script = func_repomodule
	script = recursive_or_not
	script = func_Info_Summary
	script = continue_or_exit
	# --- perform procedure
	# script = perform_fetch_merge

[command "Plr"]
	# --- select module
	script = func_repogroup_with_main
	script = func_repomodule
	script = recursive_or_not
	script = func_Info_Summary
	script = continue_or_exit
	# --- perform procedure
	# script = perform_pull

[command "Arc"]
	# --- select module
	script = func_repogroup_with_main
	script = func_repomodule
	script = recursive_or_not
	script = func_Info_Summary
	script = continue_or_exit
	# --- perform procedure
	script = perform_archive

[command "ArI"]
	# --- select module
	script = func_repogroup_with_main
	script = func_repomodule
	script = recursive_or_not
	script = func_Info_Summary
	script = continue_or_exit
	# --- perform procedure
	script = perform_archive_importing


#### _______________________________
#### ___ [menu "Branch"] ___________

[command "BSt"]
	script = func_repogroup_with_main
	script = func_repomodule
	script = func_get_owner_branch_name
	script = recursive_or_not
	script = func_Info_Summary
	script = func_Branch_Info_Summary
	# --- perform procedure
	script = perform_branch_compare_status

[command "BYC"]
	script = func_repogroup_with_main
	script = func_repomodule
	script = func_get_owner_branch_name
	script = recursive_or_not
	script = func_Info_Summary
	script = func_Branch_Info_Summary
	# --- perform procedure
	script = perform_synchro_branch_check

[command "BcC"]
	script = func_repogroup_with_main
	script = func_repomodule
	script = func_get_owner_branch_name
	script = "menu_name=\"Set_branch\""
	script = "call_menu"
	script = recursive_or_not
	script = func_Info_Summary
	script = func_Branch_Info_Summary
	script = continue_or_exit
	# --- perform procedure
	script = perform_branch_checkout

[command "BCS"]
	script = func_repogroup_with_main
	script = func_repomodule
	script = func_get_owner_branch_name
	script = recursive_or_not
	script = func_Info_Summary
	script = func_Branch_Info_Summary
	# --- perform procedure
	script = perform_synchro_branch

[command "Ref"]
	script = func_repomodule_2
	script = recursive_or_not
	script = func_Info_Summary
	script = func_Branch_Info_Summary
	script = continue_or_exit
	# --- perform procedure
	script = perform_reference_reset_config

[command "RfA"]
	script = func_repomodule_2
	script = recursive_or_not
	script = func_branch_list_from_user_config_file
	script = func_Info_Summary
	script = func_Branch_Info_Summary
	script = continue_or_exit
	# --- perform procedure
	script = perform_reference_add_branch_config

[command "RLs"]
	script = func_repomodule_2
	script = recursive_or_not
	script = func_Info_Summary
	script = continue_or_exit
	# --- perform procedure
	script = perform_reference_list_config

[command "BLC"]
	script = perform_branch_list_from_user_config_file


[command "BcOw"]
	script = func_branch_set_owner

[command "BcMn"]
	script = func_branch_set_main
	script = checkout_forcing

[command "BcOt"]
	script = func_branch_set_other

[command "BcAl"]
	script = func_branch_set_all

[command "BcCg"]
	script = func_branch_user_config_file

#### _______________________________
#### ___ [menu "Status_Commit"] ____

[command "GRS"]
	# --- select module
	script = func_repogroup_with_main
	script = func_repomodule
	# --- check variables to perform
	script = func_Info_Summary
	script = continue_or_exit
	# --- perform procedure
	script = perform_status

[command "GAC"]
	# --- select module
	script = func_repogroup_with_main
	script = func_repomodule
	# --- check variables to perform
	script = func_Info_Summary
	script = continue_or_exit
	# --- perform procedure
	script = perform_commit_message
	script = perform_add_commit


#### _______________________________
#### ___ [menu "List"] ___________
[command "LCF"]
	script = create_list_module_std_source_cfgfile
	script = continue_or__display_n_exit
	script = create_list_module_source_cfgfile
	script = create_list_module_source_foreach
	script = create_list_module_source_dot_git
	script = create_list_module_source_working
	script = perform_local_list_display_source

[command "LFe"]
	script = create_list_module_std_source_foreach
	script = continue_or__display_n_exit
	script = create_list_module_source_cfgfile
	script = create_list_module_source_foreach
	script = create_list_module_source_dot_git
	script = create_list_module_source_working
	script = perform_local_list_display_source

[command "LFW"]
	script = create_list_module_std_source_working
	script = continue_or__display_n_exit
	script = create_list_module_source_cfgfile
	script = create_list_module_source_foreach
	script = create_list_module_source_dot_git
	script = create_list_module_source_working
	script = perform_local_list_display_source

[command "LFG"]
	script = create_list_module_std_source_dot_git
	script = continue_or__display_n_exit
	script = create_list_module_source_cfgfile
	script = create_list_module_source_foreach
	script = create_list_module_source_dot_git
	script = create_list_module_source_working
	script = perform_local_list_display_source

[command "LUn"]
	script = create_list_module_source_cfgfile
	script = create_list_module_source_foreach
	script = create_list_module_source_dot_git
	script = create_list_module_source_working
	script = create_list_module_union
	script = perform_local_list_display_source

[command "LTT"]
	script = get_module_from_working_dir_2


[command "LsR"]
	# --- select module
	script = func_repogroup_all
	# --- set remote repo url
	script = func_repourl_storage
	script = func_repourl_machine
	script = func_repourl_address
	# --- check variables to perform
	script = func_Info_Summary
	# --- perform procedure
	script = perform_remote_list

#### _______________________________
#### ___ [menu "Check"] ___________
[command "Chk"]
	# --- select module
	script = func_repogroup_with_main
	script = func_repomodule
	script = recursive_or_not
	# --- check variables to perform
	script = func_Info_Summary
	# --- perform procedure
	script = perform_url_check

[command "CkS"]
	# --- select module
	script = func_repogroup_with_main
	script = func_repomodule
	script = recursive_or_not
	# --- check variables to perform
	script = func_Info_Summary
	# --- perform procedure
	script = perform_module_status

#### _______________________________
#### ___ [menu "Utility"] __________
[command "SRI"]
	script = func_repogroup_with_main
	script = func_repomodule
	script = func_repomodule_gitignore
	# --- to be implemented --- script = recursive_or_not
	# --- check variables to perform
	script = func_Info_Summary
	script = continue_or_exit
	# --- perform procedure
	# script = perform_gitignore_update

[command "Lcs"]
	# --- set repogroup & parent module of the module to clone
	script = func_repogroup_without_main
	script = func_repo_parent_module
	script = func_display_licensed_dir
	script = func_display_licensed_files
	# --- to be implemented --- script = recursive_or_not
	# --- check variables to perform
	script = func_Info_Summary
	script = continue_or_exit
	# --- perform procedure
	# script = perform_gitignore_update

#### _______________________________
#### ___ [menu "Remove"] ___________
[command "RmL"]
	# --- select module
	script = func_repogroup_without_main
	script = func_repomodule
	# --- check variables to perform
	script = func_Info_Summary
	script = func_module_childs_list
	script = continue_or_exit
	# --- perform procedure
	script = perform_remove_local

[command "RmR"]
	# --- select module
	script = func_repogroup_without_main
	# --- set remote repo url
	script = func_repourl_storage
	script = func_repourl_machine
	script = func_repourl_address
	# --- select module to clone
	script = func_remote_module_list
	script = func_remote_module_name
	# --- prepare variable to perform
	script = func_export_variable
	script = func_Info_Summary
	script = continue_or_exit
	# --- perform procedure

[parameter "repo_sub_storage_param_get"]
	uuid = "Storage partition uuid, it needs to check if remote storage is attached"
	machine = "remote machine where the storage/partition data device is mounted - Example: <onarch>"
	protocol = "protocol by which getting the connection with the remote machine - Example: <ssh://>"
	address = "the address by which getting the connection with the remote machine - Example: <ssh://work@192.168.8.134>"
	mount = "path (on the remote machine) of the mounting point of the storage/partition data device - Example: </mnt/mypass_2>"
	url = "url of the module remote repository - Example: <ssh://work@192.168.8.134/mnt/mypass_2/ObsiDataRemote/Year_2023_2/repo__prjs/tst_prj_1.git>"
	urlgroup = "url of the group directory - Example: <ssh://work@192.168.8.134/mnt/mypass_2/ObsiDataRemote/Year_2023_2/repo__prjs>"
	reporemotepath = "path (on the remote machine) of the module remote repository - Example: </mnt/mypass_2/ObsiDataRemote/Year_2023_2/repo__prjs/tst_prj_1.git>"
	group = "group of repo which the submodule belongs to"
	groupremotepath = "path (on the remote machine) where is located the group folder - Example: </mnt/mypass_2/ObsiDataRemote/Year_2023_2/repo__prjs>"

[parameter "cmd_ssh"]
    testconnection
    crt
    shutdown
    teststoragemount
    umount
    lsrepogroup

[parameter "cmd_remote_storage"]
    chkmount
    crt
    shutdown
    lsrepogroup
	lsrepogroupall
	newremote
	removeremoterepo
	chkremoterepopath

[parameter "git_sub_repo_local_crt_cln"] 
	new
	genericnew
	clone
	newremote
	addabsorb

[parameter "git_sub_repo_local_cmd"] 
	new
	clone
	status
	gitstatus
	gitadd
	gitcommit
	gitlog
	gitaddcommitlogstatus
	gitfetchmerge
	gitpull
	synchrobranch
	synchrobranchcheck
	archive
	archivedir = /Users/work/ObsiDataArchive
	archivebranch = dev_work_bigsur_mcmn
	archiveformat = zip
	archiveimporting
